#pragma METAINFO("VKB Gladiator NXT Dual Sticks for Elite Dangerous on PS4", 2, 2, "SirBrass")
#include <ps4.gph>

/* Currently in evaluation. Published for posterity and for general evaluation
and constructive criticism by the community. Any suggestions for reducing bytecode
glut would be appreciated.

NOTE: Right Stick configured to USB-B (Input 2) for testing, as Input 3 is also
the programming port, and testing through Gtuner requires PC connection at
USB C, and remapping should not be assigned while this is in progress. After testing,
change RS port assignment variable to USB-C.

This script was developed for VKB Gladiator NXT Sticks in a dual stick (HOSAS)
setup, specifically with the Left stick being a Premium stick. This setup can use
either Premium or standard stick on the right stick.

In E:D Bindings, you will have to configure all axes differently. In this code,
due to the nature of the default stick setups by VKB, the sticks default to Left
thumb stick inputs into the T2. In order for axes inputs to not step on each other, 
the assignments had to distinct from each other. Also, GPC2 lanugage doesn't allow 
multiple remap layouts even if they're assigned to different USB ports. Accordingly,
I bound left stick controls (assumed to be for translational axes of vertical, lateral, 
and throttle) to L2/R2, L3/R3, and Right Stick Y respectively.

Right stick by default is x and y on Left thumb stick x and y, and twist Rz is 
on the Right thumb stick y-axis. Bindings should be made accordingly.

Experimental stick response curves courtesy of J2Kbr.

Usage:
*Left stick plugged into USB-A.
*Right stick plugged into USB-C using the OTG cable provided with the Titan
Connection kit, or any other compatible OTG cable.

This script does not dictate how you bind your controls in Elite Dangerous, but
seeks to let you choose your own bindings. E:D allows a maximum of 32 discrete 
buttons. However, as the DS4 does not have that many, the use of combos allows
that to be extended in this case. There are no combo repeats.

Also, assumed that user has verified that the analogue hat function is enabled
through VKB's software on the premium stick. Also, the analogue mini-hat axes are 
on buttons 5 and 8 (R2 and L2 respectively). Left stick has these bound to Gyro, 
and right stick has the POV set to discrete and the axes for the analogue POV 
disabled so that it won't interfere with the X-axis on the left stick.

Once TM HOTAS 4 output profile is supported, much of the issues here will go away 
due to the additional configurability available.

Buttons not visible to T2 are the 3 function buttons on the base, the rotary 
encoders, the rapid fire trigger on the premium stick, and the POV hat push buttons.
Also, due to some kind of interference, use of the standard stick shaft switch is also inoperable.

*/

//-----------------------Timers-----------------------------
#define tDelayBtn 70   // delay between following button events
#define tDelayBtnrelease 120 //delay till button release

//------------------------MAIN------------------------------

//	Port variables for port checking

const uint8 LS_Port = 1; // PORT_USB_A
const uint8 RS_Port = 3; // PORT_USB_C NOTE: Change to 2 for testing, 3 for console use

// Variable Values for simulated axes on Left Stick
fix32 LS_X_val = 0.0;
fix32 LS_Y_val = 0.0;
fix32 LS_Z_val = 0.0;

main {

/*	Stick response curves courtesy of J2Kbr
	set_val(PS4_LX, stick_response(PS4_LX));
    set_val(PS4_LY, stick_response(PS4_LY));
	set_val(PS4_RX, stick_response(PS4_RX));
	set_val(PS4_RY, stick_response(PS4_RY));*/

//	Set Mini stick centering and suppress Gyro output
	
	set_val(GYRO_1_X, 0.0);
	set_val(PS4_ACCX, clamp((get_actual(GYRO_1_X)/2.0)-25.0,-25.0,25.0));
	set_val(GYRO_1_Y, 0.0);
	set_val(PS4_ACCY, clamp((get_actual(GYRO_1_Y)/2.0)-25.0,-25.0,25.0));

//	Left Stick Axes Programming
	
	//	Left Stick X-Axis bound to L3 and R3
	if (get_actual(ACCEL_2_X))
	{
		if (get_port(ACCEL_2_X) == LS_Port)
		{
			LS_X_val = get_actual(ACCEL_2_X);
			set_val(ACCEL_2_X, 0.0);
			if (LS_X_val <= -7.5)
			{
				set_val(PS4_L3, abs(LS_X_val));
			}
			if (LS_X_val >= 7.5)
			{
				set_val(PS4_R3, abs(LS_X_val));
			}
		}
	}
	
	//	Left Stick Z-Axis bound to L3 and R2
	if (get_actual(ACCEL_2_Z))
	{
		if (get_port(ACCEL_2_Z) == LS_Port)
		{
			LS_Z_val = get_actual(ACCEL_2_Z);
			set_val(ACCEL_2_Z, 0.0);
			if (LS_Z_val <= -7.5)
			{
				set_val(PS4_L2, abs(LS_Z_val));
			}
			if (LS_Z_val >= 7.5)
			{
				set_val(PS4_R2, abs(LS_Z_val));
			}
		}
	}

	//	Left Stick Y-Axis
	if (get_actual(ACCEL_2_Y))
	{
		if (get_port(ACCEL_2_Y) == LS_Port)
		{
			LS_Y_val = get_actual(ACCEL_2_Y);
			set_val(ACCEL_2_Y, 0.0);
			set_val(PS4_RY, LS_Y_val);
		}
	}
	
	//	Right Stick Twist Z Axis
	//	Needed because Left stick y is stepping on STICK_1_Y binding to RX
	if (get_actual(STICK_1_Y))
	{
		if (get_port(STICK_1_Y) == RS_Port)
		{
			set_val(PS4_RX, get_actual(STICK_1_Y));
		}
	}

//	Button combos
	//	Right Stick Combos and Assignments
		//	Trigger
		if (get_actual(BUTTON_17) && get_port(BUTTON_17) == RS_Port)
		{
			set_val(BUTTON_17, 0.0);
			set_val(PS4_R1, get_actual(BUTTON_17));
		}
		
		//	Index
		if (get_actual(BUTTON_14) && get_port(BUTTON_14) == RS_Port)
		{
			if (event_active(BUTTON_14))
			{
				set_val(BUTTON_14, 0.0);
				combo_run(RSIndex_on);
			}
			else if (!RSIndex_on)
			{
				set_val(BUTTON_14, 0.0);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_DOWN, 100);
			}
			else if (RSIndex_on)
			{
				combo_stop(RSIndex_on);
			}
				
		}
		else if (get_actual(BUTTON_14) && get_port(BUTTON_14) == RS_Port)
		{
			set_val(BUTTON_14, 0.0);
		}
		
		//	Pinkie
		if (event_active(BUTTON_7) && get_port(BUTTON_7) == RS_Port)
		{
			set_val(BUTTON_7, 0.0);
			combo_run(RSPinkie_on);
		}
		else if (get_actual(BUTTON_7) && get_port(BUTTON_7) == RS_Port)
		{
			set_val(BUTTON_7, 0.0);
		}
		
		//	Red Thumb
		if (event_active(BUTTON_15) && get_port(BUTTON_15) == RS_Port)
		{
			set_val(BUTTON_15, 0.0);
			combo_run(RSRed_on);
		}
		else if (get_actual(BUTTON_15) && get_port(BUTTON_15) == RS_Port)
		{
			set_val(BUTTON_15, 0.0);
		}
		
		//	Center Hat
			//	Left
			if (event_active(BUTTON_2) && get_port(BUTTON_2) == RS_Port)
			{
				set_val(BUTTON_2, 0.0);
				combo_run(RSCHatL_on);
			}
			else if (get_actual(BUTTON_2) && get_port(BUTTON_2) == RS_Port)
			{
				set_val(BUTTON_2, 0.0);
			}
			
			//	Right
			if (event_active(BUTTON_18) && get_port(BUTTON_18) == RS_Port)
			{
				set_val(BUTTON_18, 0.0);
				combo_run(RSCHatR_on);
			}
			else if (get_actual(BUTTON_18) && get_port(BUTTON_18) == RS_Port)
			{
				set_val(BUTTON_18, 0.0);
			}
			
			//	Up
			if (event_active(BUTTON_4) && get_port(BUTTON_4) == RS_Port)
			{
				set_val(BUTTON_4, 0.0);
				combo_run(RSCHatUp_on);
			}
			else if (get_actual(BUTTON_4) && get_port(BUTTON_4) == RS_Port)
			{
				set_val(BUTTON_4, 0.0);
			}
			
			//	Down
			if (event_active(BUTTON_19) && get_port(BUTTON_19) == RS_Port)
			{
				set_val(BUTTON_19, 0.0);
				combo_run(RSCHatDown_on);
			}
			else if (get_actual(BUTTON_19) && get_port(BUTTON_19) == RS_Port)
			{
				set_val(BUTTON_19, 0.0);
			}
			
		//	Right Hat			
			//	Left
			if (event_active(BUTTON_20) && get_port(BUTTON_20) == RS_Port)
			{
				set_val(BUTTON_20, 0.0);
				combo_run(RSRHatL_on);
			}
			else if (get_actual(BUTTON_20) && get_port(BUTTON_20) == RS_Port)
			{
				set_val(BUTTON_20, 0.0);
			}
			
			//	Right
			if (event_active(BUTTON_6) && get_port(BUTTON_6) == RS_Port)
			{
				set_val(BUTTON_6, 0.0);
				combo_run(RSRHatR_on);
			}
			else if (get_actual(BUTTON_6) && get_port(BUTTON_6) == RS_Port)
			{
				set_val(BUTTON_6, 0.0);
			}
			
			//	Up
			if (event_active(BUTTON_9) && get_port(BUTTON_9) == RS_Port)
			{
				set_val(BUTTON_9, 0.0);
				combo_run(RSRHatUp_on);
			}
			else if (get_actual(BUTTON_9) && get_port(BUTTON_9) == RS_Port)
			{
				set_val(BUTTON_9, 0.0);
			}
			
			//	Down
			if (event_active(BUTTON_1) && get_port(BUTTON_1) == RS_Port)
			{
				set_val(BUTTON_1, 0.0);
				combo_run(RSRHatDown_on);
			}
			else if (get_actual(BUTTON_1) && get_port(BUTTON_1) == RS_Port)
			{
				set_val(BUTTON_1, 0.0);
			}
			
	//	Left Stick Combos
		//	Index
		if (event_active(BUTTON_4) && get_port(BUTTON_4) == LS_Port)
		{
			set_val(BUTTON_4, 0.0);
			combo_run(LSIndex_on);
		}
		else if (get_actual(BUTTON_4) && get_port(BUTTON_4) == LS_Port)
		{
			set_val(BUTTON_4, 0.0);
		}
		
		//	Pinkie
		if (event_active(BUTTON_3) && get_port(BUTTON_3) == LS_Port)
		{
			set_val(BUTTON_3, 0.0);
			combo_run(LSPinkie_on);
		}
		else if (get_actual(BUTTON_3) && get_port(BUTTON_3) == LS_Port)
		{
			set_val(BUTTON_3, 0.0);
		}
		
		//	Red Thumb
		if (event_active(BUTTON_2) && get_port(BUTTON_2) == LS_Port)
		{
			set_val(BUTTON_2, 0.0);
			combo_run(LSRed_on);
		}
		else if (get_actual(BUTTON_2) && get_port(BUTTON_2) == LS_Port)
		{
			set_val(BUTTON_2, 0.0);
		}
		
		//	Left Hat
			//	Left
			if (event_active(BUTTON_20) && get_port(BUTTON_20) == LS_Port)
			{
				set_val(BUTTON_20, 0.0);
				combo_run(LSLHatL_on);
			}
			else if (get_actual(BUTTON_20) && get_port(BUTTON_20) == LS_Port)
			{
				set_val(BUTTON_20, 0.0);
			}
			
			//	Right
			if (event_active(BUTTON_6) && get_port(BUTTON_6) == LS_Port)
			{
				set_val(BUTTON_6, 0.0);
				combo_run(LSLHatR_on);
			}
			else if (get_actual(BUTTON_6) && get_port(BUTTON_6) == LS_Port)
			{
				set_val(BUTTON_6, 0.0);
			}
			
			//	Up
			if (event_active(BUTTON_9) && get_port(BUTTON_9) == LS_Port)
			{
				set_val(BUTTON_9, 0.0);
				combo_run(LSLHatUp_on);
			}
			else if (get_actual(BUTTON_9) && get_port(BUTTON_9) == LS_Port)
			{
				set_val(BUTTON_9, 0.0);
			}
			
			//	Down
			if (event_active(BUTTON_21) && get_port(BUTTON_21) == LS_Port)
			{
				set_val(BUTTON_21, 0.0);
				combo_run(LSLHatDown_on);
			}
			else if (get_actual(BUTTON_21) && get_port(BUTTON_21) == LS_Port)
			{
				set_val(BUTTON_21, 0.0);
			}
		
		//	Left Stick Shaft Hat Combos
			//	Left
			if (event_active(PADDLE_4) && get_port(PADDLE_4) == LS_Port)
			{
				set_val(PADDLE_4, 0.0);
				combo_run(LSShaftL);
			}
			else if (get_actual(PADDLE_4) && get_port(PADDLE_4) == LS_Port)
			{
				set_val(PADDLE_4, 0.0);
			}
			
			//	Right
			if (event_active(PADDLE_2) && get_port(PADDLE_2) == LS_Port)
			{
				set_val(PADDLE_2, 0.0);
				combo_run(LSShaftR);
			}
			else if (get_actual(PADDLE_2) && get_port(PADDLE_2) == LS_Port)
			{
				set_val(PADDLE_2, 0.0);
			}
			
			//	Up
			if (event_active(PADDLE_1) && get_port(PADDLE_1) == LS_Port)
			{
				set_val(PADDLE_1, 0.0);
				combo_run(LSShaftUp);
			}
			else if (get_actual(PADDLE_1) && get_port(PADDLE_1) == LS_Port)
			{
				set_val(PADDLE_1, 0.0);
			}
			
			//	Down
			if (event_active(PADDLE_3) && get_port(PADDLE_3) == LS_Port)
			{
				set_val(PADDLE_3, 0.0);
				combo_run(LSShaftDown);
			}
			else if (get_actual(PADDLE_3) && get_port(PADDLE_3) == LS_Port)
			{
				set_val(PADDLE_3, 0.0);
			}
}

//	Combo Defines
	//	Right Stick Combo Definitions
			//	Index: Touch Pad Lower Left + D-Pad Down
			combo RSIndex_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_DOWN, 100);
				wait(tDelayBtnrelease);/* 
				set_val(PS4_TOUCH, 0);
				set_val(PS4_DOWN, 0);*/
			}
		
			//	Pinkie: Touch Pad Lower Left + D-Pad Up
			combo RSPinkie_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_UP, 100);
				wait(tDelayBtnrelease); 
				set_val(PS4_TOUCH, 0);
				set_val(PS4_UP, 0);
			}
		
			//	Red Thumb: Touch Pad Lower Left + D-Pad Right
			combo RSRed_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_RIGHT, 100);
				wait(tDelayBtnrelease); 
				set_val(PS4_TOUCH, 0); 
				set_val(PS4_RIGHT, 0);
			}
		
		//	Center Hat
			//	Left: Touch Pad Upper Left + D-Pad Left
			combo RSCHatL_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_LEFT, 100);
				wait(tDelayBtnrelease); 
				set_val(PS4_TOUCH, 0.0);
				set_val(PS4_LEFT, 0);
			}
			
			//	Right: Touch Pad Upper Left + D-Pad Right
			combo RSCHatR_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_RIGHT, 100);
				wait(tDelayBtnrelease); 
				set_val(PS4_TOUCH, 0.0);
				set_val(PS4_RIGHT, 0);
			}
			
			//	Up: Touch Pad Upper Left + D-Pad Up
			combo RSCHatUp_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_UP, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0.0);
				set_val(PS4_UP, 0);
			}
			
			//	Down: Touch Pad Upper Left + D-Pad Down
			combo RSCHatDown_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0); 
				set_val(PS4_TOUCH1Y, -30.0); 
				set_val(PS4_TOUCH, 100.0);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_DOWN, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0.0);
				set_val(PS4_DOWN, 0);
			}
			
		//	Right Hat
			//	Left: Touch Pad Upper Right + D-Pad Left
			combo RSRHatL_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_LEFT, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_LEFT, 0);
			}
			
			//	Right: Touch Pad Upper Right + D-Pad Right
			combo RSRHatR_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_RIGHT, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_RIGHT, 0);
			}
			
			//	Up: Touch Pad Upper Right + D-Pad Up
			combo RSRHatUp_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_UP, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_UP, 0);
			}
			
			//	Down: R3 + D-Pad Down
			combo RSRHatDown_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0); 
				set_val(PS4_TOUCH1Y, -30.0);
				set_val(PS4_TOUCH, 100); 	
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_DOWN, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_DOWN, 0);
			}
			
	//	Left Stick Combo Definitions
		//	Index Button: Circle + Touch Pad Lower Left + D-Pad Down
			combo LSIndex_on{
				set_val(PS4_CIRCLE, 100);
				wait(tDelayBtn);
				set_val(PS4_CIRCLE, 100);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_CIRCLE, 100);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_DOWN, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_CIRCLE, 0); 
				set_val(PS4_TOUCH, 0);
				set_val(PS4_DOWN, 0);
			}
		
		//	Pinkie Button: Triangle + Touch Pad Lower Left + D-Pad Up
			combo LSPinkie_on{
				set_val(PS4_TRIANGLE, 100);
				wait(tDelayBtn);
				set_val(PS4_TRIANGLE, 100);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TRIANGLE, 100);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_UP, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TRIANGLE, 0);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_UP, 0);
			}
		
		//	Red Thumb: Circle + Touch Pad Lower Left + D-Pad Right
			combo LSRed_on{
				set_val(PS4_CIRCLE, 100);
				wait(tDelayBtn);
				set_val(PS4_CIRCLE, 100);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0); 
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				wait(tDelayBtn);
				set_val(PS4_CIRCLE, 100);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, -70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100); 
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_TOUCH2Y, 0.0);
				set_val(PS4_RIGHT, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_CIRCLE, 0);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_RIGHT, 0);
			}
			
		//	Left Hat
			//	Left: Touch Pad Lower Right + D-Pad Left
			combo LSLHatL_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_LEFT, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_LEFT, 0);
			}
			
			//	Right: Touch Pad Lower Right + D-Pad Right
			combo LSLHatR_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_RIGHT, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_RIGHT, 0);
			}
			
			//	Up: Touch Pad Lower Right + D-Pad Up
			combo LSLHatUp_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_UP, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_UP, 0);
			}
			
			//	Down: Touch Pad Lower Right + D-Pad Down
			combo LSLHatDown_on{
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				wait(tDelayBtn);
				set_val(PS4_TOUCH1, 100.0);
				set_val(PS4_TOUCH1X, 70.0);
				set_val(PS4_TOUCH1Y, 30.0);
				set_val(PS4_TOUCH, 100);
				set_val(PS4_TOUCH2X, 0.0);
				set_val(PS4_DOWN, 100);
				wait(tDelayBtnrelease);
				set_val(PS4_TOUCH, 0);
				set_val(PS4_DOWN, 0);
			}
		
		//	Left Stick Shaft Hat Combos
			//	Left: Square + D-Pad Left
			combo LSShaftL {
				set_val(PS4_SQUARE, 100.0);
				wait(tDelayBtn);
				set_val(PS4_SQUARE, 100.0);
				set_val(PS4_LEFT, 100.0);
				wait(tDelayBtnrelease);
				set_val(PS4_SQUARE, 0.0);
				set_val(PS4_LEFT, 0.0);
			}
			
			//	Right: Square + D-Pad Right
			combo LSShaftR {
				set_val(PS4_SQUARE, 100.0);
				wait(tDelayBtn);
				set_val(PS4_SQUARE, 100.0);
				set_val(PS4_RIGHT, 100.0);
				wait(tDelayBtnrelease);
				set_val(PS4_SQUARE, 0.0);
				set_val(PS4_RIGHT, 0.0);
			}
			
			//	Up: Square + D-Pad Up
			combo LSShaftUp {
				set_val(PS4_SQUARE, 100.0);
				wait(tDelayBtn);
				set_val(PS4_SQUARE, 100.0);
				set_val(PS4_UP, 100.0);
				wait(tDelayBtnrelease);
				set_val(PS4_SQUARE, 0.0);
				set_val(PS4_UP, 0.0);
			}
			
			//	Down: Square + D-Pad Down
			combo LSShaftDown {
				set_val(PS4_SQUARE, 100.0);
				wait(tDelayBtn);
				set_val(PS4_SQUARE, 100.0);
				set_val(PS4_DOWN, 100.0);
				wait(tDelayBtnrelease);
				set_val(PS4_SQUARE, 0.0);
				set_val(PS4_DOWN, 0.0);
			}	

// Stick response function
fix32 stick_response(uint8 idx) {
    const uint8 base[] = { 
        0x00, 0x05, 0x0A, 0x0F, 0x14, 0x19, 0x1E, 0x23, 0x28, 0x2D, 0x32, 0x37, 
        0x3C, 0x41, 0x46, 0x4B, 0x50, 0x55, 0x5A, 0x5F, 0x64 
    };
    const uint8 cc[] = { 
        0x00, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x24, 0x27, 0x2A, 
        0x2D, 0x2F, 0x32, 0x35, 0x38, 0x40, 0x49, 0x52, 0x64 
    };
 
    fix32 value = get_actual(idx);
    fix32 signal = (value >= 0.0 ? 1.0 : -1.0);
    value = abs(value);
 
    uint8 i = min((uint8)value / 5, 19);
    value = lerp((fix32)cc[i], (fix32)cc[i+1], (value - (fix32)base[i]) / 5.0);
 
    return(value * signal);
}
